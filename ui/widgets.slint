import { ThemeManager, LightTheme, DarkTheme, ColorfulTheme } from "themes.slint";
import { ScrollView } from "std-widgets.slint";

// Custom Button Widget
export component CustomButton inherits Rectangle {
    in property <string> text: "Button";
    in property <bool> enabled: true;
    in property <string> button-type: "primary"; // primary, secondary, danger
    in property <string> current-theme: "light";
    callback clicked <=> touch.clicked;

    theme-manager := ThemeManager {
        current-theme: root.current-theme;
    }

    property <brush> bg-color: button-type == "primary" && current-theme == "light" ? LightTheme.primary-gradient :
                               button-type == "primary" && current-theme == "dark" ? DarkTheme.primary-gradient :
                               button-type == "primary" && current-theme == "colorful" ? ColorfulTheme.primary-gradient :
                               button-type == "primary" ? theme-manager.primary :
                               button-type == "danger" ? theme-manager.danger :
                               theme-manager.surface;
    property <color> text-color: button-type == "secondary" ? theme-manager.text-primary : #ffffff;
    property <brush> hover-color: button-type == "primary" ? theme-manager.button-hover :
                                 button-type == "danger" ? theme-manager.danger.darker(0.1) :
                                 theme-manager.surface.darker(0.1);

    min-width: 120px;
    min-height: 40px;
    border-radius: 8px;
    background: touch.pressed ? hover-color : bg-color;
    border-width: button-type == "secondary" ? 1px : 0px;
    border-color: theme-manager.border;

    animate background { duration: 150ms; easing: ease-out; }

    touch := TouchArea {
        enabled: root.enabled;
    }

    Text {
        text: root.text;
        color: root.text-color;
        font-size: 14px;
        font-weight: 600;
        horizontal-alignment: center;
        vertical-alignment: center;
    }

    // Disabled state
    if !root.enabled: Rectangle {
        background: theme-manager.text-muted;
        opacity: 0.6;
    }
}

// Custom Card Widget
export component CustomCard inherits Rectangle {
    in property <string> title: "Card Title";
    in property <string> content: "Card content goes here...";
    in property <bool> elevated: true;
    in property <string> current-theme: "light";

    theme-manager := ThemeManager {
        current-theme: root.current-theme;
    }

    min-height: 120px;
    background: theme-manager.card-bg;
    border-radius: 12px;
    border-width: 1px;
    border-color: theme-manager.border;

    // Drop shadow effect
    if elevated: Rectangle {
        x: 2px;
        y: 2px;
        width: parent.width;
        height: parent.height;
        background: theme-manager.shadow;
        border-radius: parent.border-radius;
        z: -1;
    }

    VerticalLayout {
        padding: 20px;
        spacing: 12px;

        Text {
            text: root.title;
            font-size: 18px;
            font-weight: 700;
            color: theme-manager.text-primary;
            horizontal-alignment: left;
        }

        Text {
            text: root.content;
            font-size: 14px;
            color: theme-manager.text-secondary;
            wrap: word-wrap;
            horizontal-alignment: left;
        }

        VerticalLayout {
            spacing: 15px;
            @children
        }
    }
}

// Custom Input Field
export component CustomInput inherits Rectangle {
    in property <string> placeholder: "Enter text...";
    in property <string> label: "";
    in-out property <string> text;
    in property <bool> enabled: true;
    in property <string> current-theme: "light";

    theme-manager := ThemeManager {
        current-theme: root.current-theme;
    }

    property <color> input-border-color: input.has-focus ? theme-manager.primary : theme-manager.border;

    min-height: 60px;

    VerticalLayout {
        spacing: 6px;

        if root.label != "": Text {
            text: root.label;
            font-size: 12px;
            font-weight: 600;
            color: theme-manager.text-primary;
        }

        Rectangle {
            height: 40px;
            background: theme-manager.input-bg;
            border-radius: 6px;
            border-width: 2px;
            border-color: root.input-border-color;

            animate border-color { duration: 200ms; easing: ease-out; }

            input := TextInput {
                text <=> root.text;
                font-size: 14px;
                color: theme-manager.text-primary;
                enabled: root.enabled;
                x: 12px;
                width: parent.width - 24px;
                vertical-alignment: center;
            }

            if root.text == "": Text {
                text: root.placeholder;
                font-size: 14px;
                color: theme-manager.text-muted;
                x: 12px;
                width: parent.width - 24px;
                vertical-alignment: center;
            }
        }
    }
}

// Text File Display Card Widget
export component TextFileCard inherits Rectangle {
    in property <string> title: "Text File";
    in property <string> file-content: "No file loaded...";
    in property <string> file-path: "";
    in property <bool> elevated: true;
    in property <string> current-theme: "light";
    callback load-file(string);

    theme-manager := ThemeManager {
        current-theme: root.current-theme;
    }

    min-height: 400px;
    background: theme-manager.card-bg;
    border-radius: 12px;
    border-width: 1px;
    border-color: theme-manager.border;

    // Drop shadow effect
    if elevated: Rectangle {
        x: 2px;
        y: 2px;
        width: parent.width;
        height: parent.height;
        background: theme-manager.shadow;
        border-radius: parent.border-radius;
        z: -1;
    }

    VerticalLayout {
        padding: 20px;
        spacing: 12px;

        // Header with title and file path
        HorizontalLayout {
            spacing: 10px;
            alignment: space-between;

            Text {
                text: root.title;
                font-size: 18px;
                font-weight: 700;
                color: theme-manager.text-primary;
                horizontal-alignment: left;
            }

            HorizontalLayout {
                spacing: 5px;

                CustomButton {
                    text: "📄 Sample.txt";
                    button-type: "secondary";
                    current-theme: root.current-theme;
                    max-width: 120px;
                    clicked => {
                        root.load-file("sample.txt");
                    }
                }

                CustomButton {
                    text: "⚙️ Config.json";
                    button-type: "secondary";
                    current-theme: root.current-theme;
                    max-width: 120px;
                    clicked => {
                        root.load-file("config.json");
                    }
                }

                CustomButton {
                    text: "📖 README.md";
                    button-type: "secondary";
                    current-theme: root.current-theme;
                    max-width: 120px;
                    clicked => {
                        root.load-file("README.md");
                    }
                }

                CustomButton {
                    text: "🦀 Example.rs";
                    button-type: "secondary";
                    current-theme: root.current-theme;
                    max-width: 120px;
                    clicked => {
                        root.load-file("example.rs");
                    }
                }
            }
        }

        if root.file-path != "": Text {
            text: "File: " + root.file-path;
            font-size: 12px;
            color: theme-manager.text-muted;
            horizontal-alignment: left;
        }

        // Scrollable text content area
        Rectangle {
            background: theme-manager.bg;
            border-radius: 8px;
            border-width: 1px;
            border-color: theme-manager.border;
            min-height: 250px;

            ScrollView {
                width: 100%;
                height: 100%;

                VerticalLayout {
                    padding: 15px;

                    Text {
                        text: root.file-content;
                        font-size: 12px;
                        font-family: "Consolas, Monaco, 'Courier New', monospace";
                        color: theme-manager.text-primary;
                        wrap: word-wrap;
                        horizontal-alignment: left;
                        vertical-alignment: top;
                        width: 100%;
                    }
                }
            }
        }
    }
}

// Custom Toggle Switch
export component CustomToggle inherits Rectangle {
    in property <string> label: "Toggle";
    in-out property <bool> checked: false;
    in property <string> current-theme: "light";
    callback toggled(bool);

    theme-manager := ThemeManager {
        current-theme: root.current-theme;
    }

    property <color> track-color: checked ? theme-manager.primary : theme-manager.border;
    property <color> thumb-color: theme-manager.surface;

    min-height: 40px;

    HorizontalLayout {
        spacing: 12px;
        alignment: start;

        Text {
            text: root.label;
            font-size: 14px;
            color: theme-manager.text-primary;
            vertical-alignment: center;
        }

        Rectangle {
            width: 50px;
            height: 24px;
            border-radius: 12px;
            background: root.track-color;

            animate background { duration: 200ms; easing: ease-out; }

            Rectangle {
                width: 20px;
                height: 20px;
                border-radius: 10px;
                background: root.thumb-color;
                x: root.checked ? 28px : 2px;
                y: 2px;

                animate x { duration: 200ms; easing: ease-out; }

                drop-shadow-blur: 2px;
                drop-shadow-color: theme-manager.shadow;
            }

            TouchArea {
                clicked => {
                    root.checked = !root.checked;
                    root.toggled(root.checked);
                }
            }
        }
    }
}
